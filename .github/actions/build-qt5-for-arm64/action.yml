name: Build Qt for Apple ARM64
description: Build Qt for Apple ARM64 using Clang 14
inputs:
  qt-version:
    description: 'Qt version to build'
    required: true
  python3-version:
    description: 'Python 3 version'
    required: true
  python2-version:
    description: 'Python 2 version'
    required: true
  xcode-version:
    description: 'Xcode version'
    required: true
runs:
  using: "composite"
  steps:
      - name: Switch to XCode 14
        run: |
          sudo xcode-select -switch /Applications/Xcode_${{ inputs.xcode-version }}.app
        shell: bash

      - name: Install Homebrew dependencies
        run: |
          brew install --quiet --formula libiconv libpng libpq libtool libuv libxau libxcb libxdmcp
          brew install --quiet --formula autoconf automake cmake pcre2 harfbuzz freetype node@18 nspr nss
          brew install --quiet --formula xcb-proto xcb-util xcb-util-cursor xcb-util-image xcb-util-keysyms xcb-util-renderutil xcb-util-wm
          brew install --quiet --formula brotli bzip2 dbus glew icu4c jpeg md4c openssl@1.1 pkg-config sqlite xorgproto zlib zstd
          brew list openssl@1.1
        shell: bash

      # Use Ninja 1.11.1 because Qt need to be patched for Ninja 1.12.1.
      - name: Install Ninja 1.11.1
        run: |
          wget https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-mac.zip
          unzip ninja-mac.zip -d ./ninja
          echo "$(pwd)/ninja" >> $GITHUB_PATH
        shell: bash

      - name: Display ninja version
        run: |
          ninja --version
        shell: bash

      - name: Install pyenv
        run: |
          curl https://pyenv.run | bash

          export PYENV_ROOT="$HOME/.pyenv"
          echo "$PYENV_ROOT/shims" >> $GITHUB_PATH
          echo "$PYENV_ROOT/bin" >> $GITHUB_PATH
        shell: bash
        
      - name: Setup pyenv
        run: |
          echo $PATH
          pyenv install ${{ inputs.python3-version }} ${{ matrix.python2-version }}
          pyenv global ${{ inputs.python3-version }} ${{ matrix.python2-version }}
        shell: bash

      - name: Display Python installation location
        run: |
          python -c "import sys; print(sys.executable)"
          python2 -c "import sys; print(sys.executable)"
        shell: bash

      - name: Download Qt ${{ inputs.qt-version }} source
        run: |
          curl https://www.nic.funet.fi/pub/mirrors/download.qt-project.org/official_releases/qt/5.15/${{ inputs.qt-version }}/single/qt-everywhere-opensource-src-${{ inputs.qt-version }}.tar.xz -o qt.tar.xz
          tar xf qt.tar.xz
          mv qt-everywhere-src-${{ inputs.qt-version }} qt-src
        shell: bash

      - name: Create directory for build
        run: |
          mkdir -p qt-build
          mkdir -p qt-release
        shell: bash

      - name: Configure Qt ${{ inputs.qt-version }}
        run: |
          ../qt-src/configure \
          --prefix="../qt-release" \
          -no-strip \
          -no-rpath \
          -opensource \
          -plugin-sql-sqlite \
          -openssl \
          -verbose \
          -opengl desktop \
          -no-warnings-are-errors \
          -no-libudev \
          -no-egl \
          -nomake examples \
          -nomake tests \
          -c++std c++14 \
          -confirm-license \
          -no-use-gold-linker \
          -release \
          -no-sql-mysql \
          -no-xcb \
          -qt-libjpeg \
          -qt-libpng \
          -bundled-xcb-xinput \
          -sysconfdir /etc/xdg \
          -qt-pcre \
          -qt-harfbuzz \
          -R . \
          -icu \
          -skip qtnetworkauth \
          -skip qtpurchasing \
          -skip qtlocation \
          -I /opt/homebrew/Cellar/openssl@1.1/1.1.1w/include -L /opt/homebrew/Cellar/openssl@1.1/1.1.1w/lib \
          -I /opt/homebrew/Cellar/icu4c/74.2/include -L /opt/homebrew/Cellar/icu4c/74.2/lib
        working-directory: ${{ github.workspace }}/qt-build
        shell: bash

      - name: Build Qt ${{ inputs.qt-version }}
        run: |
          make -j$(python -c 'import os; print(os.cpu_count())')
        working-directory: ${{ github.workspace }}/qt-build
        shell: bash

      - name: Install Qt ${{ inputs.qt-version }}
        run: |
          make install -j$(python -c 'import os; print(os.cpu_count())')
        working-directory: ${{ github.workspace }}/qt-build
        shell: bash

      - name: Display release folder and architecture
        run: |
          ls -al ./qt-release
          file ./qt-release/bin/qmake
        shell: bash

      - name: Cache Qt ${{ inputs.qt-version }}
        uses: actions/cache@v4
        with:
          path: ./qt-release
          key: arm64-qt-${{ matrix.qt-version }}
        shell: bash

          
